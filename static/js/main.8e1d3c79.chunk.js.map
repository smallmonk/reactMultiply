{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","StaticText","InputText","type","onChange","evt","Board","i","state","squares","Array","fill","xIsNext","firstNums","secondNums","resultCheck","this","slice","lines","length","a","b","c","calculateWinner","setState","first","second","result","parseInt","verifyResult","target","handleTextChange","handleClick","rowno","grid","push","renderText","renderFirstNum","renderSecondNum","renderInputText","renderResultStatus","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e1d3c79.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\nfunction StaticText(props) {\n  return (\n    <span className=\"statictext\">\n      {props.value}\n    </span>\n  )\n}\n\nfunction InputText(props) {\n  return (\n    <input className=\"inputtext\"\n      type=\"number\"\n      onChange={evt => props.onChange(evt)}\n      >\n    </input>\n  )\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      firstNums: Array(12).fill(5),\n      secondNums: Array(12).fill(null),\n      resultCheck: Array(12).fill(null),\n    };\n    var i;\n    for (i = 0; i < 12; i++) {\n      this.state.secondNums[i] = (i+1);\n    }\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  handleTextChange(i, evt) {\n    const resultCheck = this.state.resultCheck.slice()\n    resultCheck[i] = verifyResult(this.state.firstNums[i], this.state.secondNums[i], evt.target.value)\n    this.setState({\n      resultCheck: resultCheck\n    })\n  }\n\n  renderFirstNum(i) {\n    return (\n      <StaticText\n      value={this.state.firstNums[i]}\n      />\n    )\n  }\n\n  renderSecondNum(i) {\n    return (\n      <StaticText\n      value={this.state.secondNums[i]}\n      />\n    )\n  }\n\n  renderText(i) {\n    return (\n      <StaticText\n      value={i}\n      />\n    )\n  }\n\n\n  renderInputText(i) {\n    return (\n      <InputText\n      value={i}\n      onChange={evt => this.handleTextChange(i, evt)}\n      />\n    )\n  }\n\n  renderResultStatus(i) {\n    if (1 === this.state.resultCheck[i]) {\n      return (\n        <StaticText\n        value=\" Good!\"\n        />\n      )\n    } else if (-1 === this.state.resultCheck[i]) {\n      return (\n        <StaticText\n          value=\" Try again...\"\n        />\n      )\n    } else{\n      return (\n        <StaticText\n          value=\"\"\n        />\n      )\n    }\n  }\n\n  renderSquare(i) {\n    return (\n        <Square \n          value={this.state.squares[i]}\n          onClick={() => this.handleClick(i)}\n        />\n    );\n  }\n\n  render() {\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if (winner) {\n    //   status = 'Winner: ' + winner;\n    // } else {\n    //   status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    // }\n\n    var grid = []\n    grid.push(\n      <div className=\"board-row\">\n        {this.renderText(\"--------------------------------------------------------------------------\")}\n      </div>\n    );\n    \n    var rowno;\n    for (rowno = 0; rowno < 12; rowno++) {\n      grid.push(\n        <div className=\"board-row\">\n          {this.renderFirstNum(rowno)}\n          {this.renderText(\" X \")}\n          {this.renderSecondNum(rowno)}\n          {this.renderText(\" = \")}\n          {this.renderInputText(rowno)}\n          {this.renderResultStatus(rowno)}\n        </div>\n      );\n      grid.push(\n        <div className=\"board-row\">\n          {this.renderText(\"--------------------------------------------------------------------------\")}\n        </div>\n      );\n    }\n\n\n    return (\n      <div>\n        <div className=\"status\">Multiplication</div>\n        <form>\n          {grid}\n        </form>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction verifyResult(first, second, result) {\n  if (null === result || result.length === 0) {\n    return 0\n  }\n  \n  if (parseInt(result, 10) === first * second) {\n    return 1\n  } else {\n    return -1\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}